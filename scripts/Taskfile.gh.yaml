# yaml-language-server: $schema=https://taskfile.dev/schema.json
---
# Copyright 2024
#
# Everyone is permitted to copy, distribute, modify, merge, sell, publish,
# sublicense or whatever the fuck they want with this software but at their
# OWN RISK.
# The author has absolutely no fucking clue what the code in this project
# does. It might just fucking work or not, there is no third option.
#
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ---
# trunk-ignore-all(yamllint/line-length): Taskfile don't handle properly multiline strings
#
# This Taskfile contains all recipes used to manage some Github related resources
version: 3

vars:
  GIT_ROOT_DIR:
    sh: git rev-parse --show-toplevel

tasks:
  # ┌───────────────────────────────────────────────────────────────────────────┐
  # │ Github Action helpers                                                     │
  # └───────────────────────────────────────────────────────────────────────────┘

  # -- List applications
  helper:projects:
    desc: List available projects
    silent: true

    cmds:
      - &list_projects
        ls -1 "{{ .GIT_ROOT_DIR }}/apps"

  helper:projects:apps:
    desc: List available applications for a specific project
    label: gh:helper:project:apps ({{ .PROJECT }})
    silent: true

    requires:
      vars: [PROJECT]

    preconditions:
      - &check_project_exists
        sh: test -d '{{ print .GIT_ROOT_DIR "/apps/" .PROJECT }}'
        msg: Project '{{ .PROJECT }}' does not exist
    cmds:
      - >-
        find "{{ .GIT_ROOT_DIR }}/apps/{{ .PROJECT }}/images" -type f -name Dockerfile -printf '%P\n' 2> /dev/null
        | xargs -I{} dirname {}
        | sort -u
        | sed 's/^/{{ .PROJECT }}|/'

  helper:apps:
    desc: List all available applications
    silent: true

    vars:
      AVAILABLE_PROJECTS:
        sh: *list_projects

    cmds:
      - for: {var: AVAILABLE_PROJECTS, as: PROJECT }
        task: helper:projects:apps
        vars:
          PROJECT: '{{ .PROJECT }}'


  # -- List updated applications
  helper:apps:updated:
    desc: List all applications that have been updated between two commits
    label: helper:projects:apps:updated ({{ .FROM_SHA }} → {{ .TO_SHA }})

    requires:
      vars: [FROM_SHA, TO_SHA]
    vars:
      AVAILABLE_PROJECTS:
        sh: *list_projects
    
    cmds:
      - for: {var: AVAILABLE_PROJECTS, as: PROJECT }
        task: helper:apps:updated:_
        vars:
          FROM_SHA: '{{ .FROM_SHA }}'
          PREFIX: '{{ .PROJECT }}|'
          PROJECT: '{{ .PROJECT }}'
          TO_SHA: '{{ .TO_SHA }}'

  helper:apps:updated:_:
    internal: true
    silent: true

    vars:
      PREFIX: '{{ .PREFIX | default "" }}'
      UPDATED_FILES:
        sh: git diff --name-only "{{ .FROM_SHA }}" "{{ .TO_SHA }}" | grep 'images' | sort
      AVAILABLE_APPS:
        sh: find "{{ .GIT_ROOT_DIR }}/apps/{{ .PROJECT }}/images" -type f -name Dockerfile -printf '%P\n' 2> /dev/null | xargs -I{} dirname {} | sort -u
    
    cmds:
      - for: {var: AVAILABLE_APPS, as: APP }
        cmd: echo "{{ .UPDATED_FILES }}" | grep -q "{{ .APP }}" && echo "{{ .PREFIX }}{{ .APP }}" || true

  helper:apps:updated:json:
    desc: Output a JSON with all applications that have been updated between two commits
    label: helper:apps:updated ({{ .FROM_SHA }} → {{ .TO_SHA }})
    silent: true

    requires:
      vars: [FROM_SHA, TO_SHA]
    vars:
      AVAILABLE_PROJECTS:
        sh: *list_projects
    
    cmds:
      - >-
        task gh:helper:apps:updated FROM_SHA="{{ .FROM_SHA }}" TO_SHA="{{ .TO_SHA }}"
        | jq --slurp --raw-input '
            split("\n")
            | map(select(. != "") 
            | split("|") 
            | {project: .[0], application: .[1]})
          ' --compact-output
