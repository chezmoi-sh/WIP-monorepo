# yaml-language-server: $schema=https://taskfile.dev/schema.json
---
# Copyright 2024
#
# Everyone is permitted to copy, distribute, modify, merge, sell, publish,
# sublicense or whatever the fuck they want with this software but at their
# OWN RISK.
# The author has absolutely no fucking clue what the code in this project
# does. It might just fucking work or not, there is no third option.
#
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ---
# trunk-ignore-all(yamllint/line-length): Taskfile don't handle properly multiline strings
#
# This Taskfile contains all recipes used to manage Docker "resources"
version: 3

vars:
  GIT_ROOT_DIR:
    sh: git rev-parse --show-toplevel
  OCI_REGISTRY: localhost

tasks:
  # ┌───────────────────────────────────────────────────────────────────────────┐
  # │ Docker image management                                                   │
  # └───────────────────────────────────────────────────────────────────────────┘

  # -- Build Docker images
  images:build:
    desc: Build a docker image for the specified image
    label: docker:images:build ({{ .PROJECT }}/{{ .IMAGE }}:{{ .BUILD_TYPE }})

    requires:
      vars: [PROJECT, IMAGE]
    vars:
      BUILD_TYPE: '{{ .BUILD_TYPE | default "live" }}'

      DOCKERFILE: '{{ print .GIT_ROOT_DIR "/apps/" .PROJECT "/images/" .IMAGE "/Dockerfile" | clean }}'
      DOCKER_DISABLE_CACHE: "{{ .DOCKER_DISABLE_CACHE | default false }}"

      IMAGE_DIR: "{{ .DOCKERFILE | dir }}"
      IMAGE_DEST: "{{ .IMAGE_DIR }}/dist/{{ .BUILD_TYPE }}/{{ .IMAGE }}.tar"

    sources:
      - "{{ .DOCKERFILE | dir }}/*"
      - "{{ .DOCKERFILE | dir }}/{{ .BUILD_TYPE }}/config/*"
      - "{{ .DOCKERFILE | dir }}/{{ .BUILD_TYPE }}/config/**/*"
      - exclude: "{{ .IMAGE_DEST }}"
    generates:
      - "{{ .IMAGE_DEST }}"

    preconditions:
      - &check_project_exists
        sh: test -d '{{ print .GIT_ROOT_DIR "/apps/" .PROJECT }}'
        msg: Project '{{ .PROJECT }}' does not exist
    cmds:
      - task: images:build:rec_guard
        vars:
          BUILD_TYPE: "{{ .BUILD_TYPE }}"
          DOCKER_DISABLE_CACHE: "{{ .DOCKER_DISABLE_CACHE }}"
          IMAGE: '{{ (.IMAGE | default ".") | dir }}'
          PROJECT: "{{ .PROJECT }}"
      - silent: true
        cmd: mkdir --parents "{{ .IMAGE_DEST | dir }}"
      # NOTE: In order to increase the speed of the build, we build the image
      #       locally and then send it to the remote context if needed.
      - |
        docker build \
          --label org.opencontainers.image.created="$(date --rfc-3339=ns)" \
          --label org.opencontainers.image.revision="$(git rev-parse HEAD)" \
          --label org.opencontainers.image.source="https://github.com/chezmoi-sh/nex.rpi/blob/$(git rev-parse --short HEAD)/{{ regexReplaceAll ".+(apps/.+?)" .DOCKERFILE "${1}" }}" \
          --build-arg BUILD_TYPE="{{ .BUILD_TYPE }}" \
          --tag "{{ .OCI_REGISTRY }}/{{ .PROJECT }}/{{ .IMAGE }}:{{ .BUILD_TYPE }}" \
          --file "{{ .DOCKERFILE }}" "{{ .IMAGE_DIR }}" {{ if eq .DOCKER_DISABLE_CACHE "true" }}--no-cache{{ end }}
      - docker save --output "{{ .IMAGE_DEST }}" "{{ .OCI_REGISTRY }}/{{ .PROJECT }}/{{ .IMAGE }}:{{ .BUILD_TYPE }}"

  images:build:rec_guard:
    desc: Helper to prevent infinite recursion
    internal: true
    silent: true
    requires:
      vars: [PROJECT, IMAGE, BUILD_TYPE, DOCKER_DISABLE_CACHE]
    status:
      - test "{{ .IMAGE }}" == "."
    cmds:
      - task: images:build
        vars:
          BUILD_TYPE: "{{ .BUILD_TYPE }}"
          DOCKER_DISABLE_CACHE: "{{ .DOCKER_DISABLE_CACHE }}"
          IMAGE: "{{ .IMAGE }}"
          PROJECT: "{{ .PROJECT }}"

  images:build:all:
    desc: Build all docker images for the current project
    label: docker:images:build:all ({{ .PROJECT }})

    requires:
      vars: [PROJECT]
    vars:
      BUILD_TYPE: '{{ .BUILD_TYPE | default "live" }}'
      DOCKERFILES:
        sh: find "{{ .GIT_ROOT_DIR }}/apps/{{ .PROJECT }}/images/" -type f -name Dockerfile -printf '%P\n' 2> /dev/null | sort -u

    preconditions:
      - *check_project_exists
    cmds:
      - for: { var: DOCKERFILES, as: DOCKERFILE }
        task: images:build
        vars:
          BUILD_TYPE: "{{ .BUILD_TYPE }}"
          DOCKER_CONTEXT: "{{ .DOCKER_CONTEXT }}"
          DOCKER_DISABLE_CACHE: "{{ .DOCKER_DISABLE_CACHE | default false }}"
          IMAGE: "{{ .DOCKERFILE | dir }}"
          PROJECT: "{{ .PROJECT }}"

  # -- Export Docker images to the remote context
  images:export:
    desc: Export a docker image for the specified image to the remote context
    label: docker:images:export ({{ .PROJECT }}/{{ .IMAGE }})

    requires:
      vars: [PROJECT, BUILD_TYPE, IMAGE, DOCKER_CONTEXT]
    vars:
      IMAGE_DEST: '{{ print .GIT_ROOT_DIR "/apps/" .PROJECT "/images/" .IMAGE "/dist/" .BUILD_TYPE "/" .IMAGE ".tar" | clean }}'

    sources:
      - "{{ .IMAGE_DEST }}"

    deps:
      - task: images:build
        vars:
          BUILD_TYPE: "{{ .BUILD_TYPE }}"
          DOCKER_DISABLE_CACHE: "{{ .DOCKER_DISABLE_CACHE | default false }}"
          IMAGE: "{{ .IMAGE }}"
          PROJECT: "{{ .PROJECT }}"
    preconditions:
      - *check_project_exists
    cmds:
      - docker --context "{{ .DOCKER_CONTEXT }}" load --input "{{ .IMAGE_DEST }}"

  images:export:all:
    desc: Export all docker images for the current project to the remote context
    label: docker:images:export:all ({{ .PROJECT }})

    requires:
      vars: [PROJECT, BUILD_TYPE, DOCKER_CONTEXT]
    vars:
      DOCKERFILES:
        sh: find "{{ .GIT_ROOT_DIR }}/apps/{{ .PROJECT }}/images/" -type f -name Dockerfile -printf '%P\n' 2> /dev/null | sort -u

    preconditions:
      - *check_project_exists
    cmds:
      - for: { var: DOCKERFILES, as: DOCKERFILE }
        task: images:export
        vars:
          BUILD_TYPE: "{{ .BUILD_TYPE }}"
          DOCKER_CONTEXT: "{{ .DOCKER_CONTEXT }}"
          DOCKER_DISABLE_CACHE: "{{ .DOCKER_DISABLE_CACHE | default false }}"
          IMAGE: "{{ .DOCKERFILE | dir }}"
          PROJECT: "{{ .PROJECT }}"

  # ┌───────────────────────────────────────────────────────────────────────────┐
  # │ Docker service management                                                 │
  # └───────────────────────────────────────────────────────────────────────────┘

  # -- List all services
  services:list:
    desc: List all defined services (aka. apps)
    label: docker:services:list ({{ .PROJECT }})
    aliases: [services, services:ls]

    requires:
      vars: [PROJECT]

    preconditions:
      - *check_project_exists
    cmds:
      - docker compose --file "{{ .GIT_ROOT_DIR }}/apps/{{ .PROJECT }}/docker-compose.yml" config --format json | jq '.services | keys[]' --raw-output
    silent: true
    env:
      COMPOSE_FILE: '{{ .DOCKER_COMPOSE_FILE }}'

  # -- Fetch status of all services
  services:status:
    desc: Fetch the status of all services
    label: docker:services:status ({{ .PROJECT }})

    requires:
      vars: [DOCKER_CONTEXT, PROJECT]
    vars:
      DOCKER_COMPOSE_FILE: '{{ print .GIT_ROOT_DIR "/apps/" .PROJECT "/docker-compose.yml" | clean }}'

    preconditions:
      - *check_project_exists
    cmds:
      - docker compose ps --format "table {{ "{{" }} .Service }}\t{{ "{{" }} .State }} {{ "{{" }} with .Health }}({{ "{{" }} . }}){{ "{{" }} end }}\t{{ "{{" }} .CreatedAt }}"
    env:
      DOCKER_CONTEXT: '{{ .DOCKER_CONTEXT }}'
      COMPOSE_FILE: '{{ .DOCKER_COMPOSE_FILE }}'
      COMPOSE_PROJECT_NAME: '{{ .PROJECT | replace "." "_" }}'

  # -- Deploy all services
  services:deploy:all:
    desc: Deploy all services to the remote context
    label: docker:services:deploy:all ({{ .PROJECT }})
    aliases: [services:deploy]

    requires:
      vars: [DOCKER_CONTEXT, PROJECT]
    vars:
      DOCKER_COMPOSE_FILE: '{{ print .GIT_ROOT_DIR "/apps/" .PROJECT "/docker-compose.yml" | clean }}'

    deps:
      - task: images:export:all
        vars:
          BUILD_TYPE: "live"
          DOCKER_CONTEXT: "{{ .DOCKER_CONTEXT }}"
          DOCKER_DISABLE_CACHE: "{{ .DOCKER_DISABLE_CACHE | default false }}"
          PROJECT: "{{ .PROJECT }}"
    preconditions:
      - *check_project_exists
    cmds:
      - docker compose up --detach --no-build --remove-orphans
      - docker system prune --force
      - task: services:status
        vars:
          DOCKER_CONTEXT: "{{ .DOCKER_CONTEXT }}"
          PROJECT: "{{ .PROJECT }}"
    env:
      DOCKER_CONTEXT: '{{ .DOCKER_CONTEXT }}'
      COMPOSE_FILE: '{{ .DOCKER_COMPOSE_FILE }}'
      COMPOSE_PROJECT_NAME: '{{ .PROJECT | replace "." "_" }}'

  # -- Teardown all services
  services:teardown:all:
    desc: Teardown all services in the remote context
    label: docker:services:teardown:all ({{ .PROJECT }})
    aliases: [services:teardown]

    requires:
      vars: [DOCKER_CONTEXT, PROJECT]
    vars:
      DOCKER_COMPOSE_FILE: '{{ print .GIT_ROOT_DIR "/apps/" .PROJECT "/docker-compose.yml" | clean }}'

    preconditions:
      - *check_project_exists
    cmds:
      - docker compose down --remove-orphans
      - task: services:status
        vars:
          DOCKER_CONTEXT: "{{ .DOCKER_CONTEXT }}"
          PROJECT: "{{ .PROJECT }}"
    env:
      DOCKER_CONTEXT: '{{ .DOCKER_CONTEXT }}'
      COMPOSE_FILE: '{{ .DOCKER_COMPOSE_FILE }}'
      COMPOSE_PROJECT_NAME: '{{ .PROJECT | replace "." "_" }}'

  # ┌───────────────────────────────────────────────────────────────────────────┐
  # │ Docker CI management                                                      │
  # └───────────────────────────────────────────────────────────────────────────┘

  # -- Run goss tests for the specified image
  goss:run:
    desc: Run goss tests for the specified image
    label: docker:goss:run ({{ .PROJECT }}/{{ .IMAGE }})
    aliases: [ci]

    requires:
      vars: [PROJECT, IMAGE]
    vars:
      GOSS_OPTS: '{{ .GOSS_OPTS | default "" }}'
      GOSS_SLEEP: '{{ .GOSS_SLEEP | default "2.5" }}'

    preconditions:
      - *check_project_exists
    cmds:
      - task: images:build
        vars:
          BUILD_TYPE: ci
          IMAGE: "{{ .IMAGE }}"
          PROJECT: "{{ .PROJECT }}"
      - task: goss:run:_
        vars:
          GOSS_OPTS: "{{ .GOSS_OPTS }}"
          GOSS_SLEEP: "{{ .GOSS_SLEEP }}"
          IMAGE: "{{ .IMAGE }}"
          PROJECT: "{{ .PROJECT }}"

  # NOTE: This task is not meant to be used directly, it's a helper task for
  #       the `goss:run` task in which we need to run the goss tests.
  goss:run:_:
    label: docker:goss:run ({{ .PROJECT }}/{{ .IMAGE }})
    internal: true

    requires:
      vars: [PROJECT, IMAGE, GOSS_OPTS, GOSS_SLEEP]
    status:
      - '! test -f {{ print .GIT_ROOT_DIR "/apps/" .PROJECT "/images/" .IMAGE "/ci/goss.yaml" | clean }}'

    cmds:
      - dcgoss run {{ .IMAGE | replace "/" "_" }}
    env:
      GOSS_OPTS: '{{ .GOSS_OPTS | default "" }}'
      GOSS_SLEEP: "{{ .GOSS_SLEEP }}"
    dir: '/{{ print .GIT_ROOT_DIR "/apps/" .PROJECT "/images/" .IMAGE "/ci" | clean }}'

  # -- Run goss tests for all images
  goss:run:all:
    desc: Run goss tests for all images
    label: docker:goss:run:all ({{ .PROJECT }})
    aliases: [ci:all]

    requires:
      vars: [DOCKER_CONTEXT, PROJECT]
    vars:
      GOSS_FILES:
        sh: find "{{ .GIT_ROOT_DIR }}/apps/{{ .PROJECT }}/images/" -type f -name goss.yaml -printf '%P\n' 2> /dev/null | sort -u

    preconditions:
      - *check_project_exists
    cmds:
      - for: { var: GOSS_FILES, as: GOSS_FILE }
        task: ci
        vars:
          DOCKER_CONTEXT: "{{ .DOCKER_CONTEXT }}"
          IMAGE: "{{ .GOSS_FILE | dir | dir }}"
          GOSS_SLEEP: '{{ .GOSS_SLEEP | default "2.5" }}'
          PROJECT: "{{ .PROJECT }}"

  # -- Add/Update goss tests for the specified image
  goss:edit:
    desc: Add/Update goss tests for the specified image
    label: docker:goss:edit ({{ .PROJECT }}/{{ .IMAGE }})
    aliases: [ci:edit]

    requires:
      vars: [PROJECT, IMAGE]
    vars:
      UID:
        sh: id --user
      GID:
        sh: id --group

    preconditions:
      - *check_project_exists
    cmds:
      - task: images:build
        vars:
          BUILD_TYPE: ci
          IMAGE: "{{ .IMAGE }}"
          PROJECT: "{{ .PROJECT }}"
      - task: goss:edit:_
        vars:
          GID: "{{ .GID }}"
          IMAGE: "{{ .IMAGE }}"
          PROJECT: "{{ .PROJECT }}"
          UID: "{{ .UID }}"

  # NOTE: This task is not meant to be used directly, it's a helper task for
  #       the `goss:edit` task in which we need to get the UID and GID of the
  #       current user. Unfortunately, we can't use the `sh` directive in the
  #       `vars` section of the `goss:edit` task because `dir` cannot be
  #       evaluated correctly.
  goss:edit:_:
    label: docker:goss:edit ({{ .IMAGE }})
    internal: true

    requires:
      vars: [PROJECT, IMAGE, UID, GID]

    cmds:
      - dcgoss edit {{ .IMAGE | replace "/" "_" }}
    dir: '/{{ print .GIT_ROOT_DIR "/apps/" .PROJECT "/images/" .IMAGE "/ci" | clean }}'
    ignore_error: true
    interactive: true
