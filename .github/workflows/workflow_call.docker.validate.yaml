# Copyright 2024
#
# Everyone is permitted to copy, distribute, modify, merge, sell, publish,
# sublicense or whatever the fuck they want with this software but at their
# OWN RISK.
# The author has absolutely no fucking clue what the code in this project
# does. It might just fucking work or not, there is no third option.
#
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
---
name: 💚 Validate OCI Image

on:
  workflow_call:
    inputs:
      application:
        description: Path of the application to (re)build
        type: string
        required: true

env:
  ASDF_DIR: /home/runner/.asdf

permissions: {}

jobs:
  goss:
    name: ✅ Check '${{ inputs.application }}' behavior
    permissions:
      checks: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5

      # Install all required tools or restore them if the cache already exists
      - name: 🚧 Restore cached tools
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        id: restore-asdf
        with:
          path: ${{ env.ASDF_DIR }}
          key: asdf-vm-${{ hashFiles('.tool-versions') }}
      - name: 📦️ Install required tools
        uses: asdf-vm/actions/install@05e0d2ed97b598bfce82fd30daf324ae0c4570e6 # v3.0.2
        with:
          skip_install: ${{ steps.restore-asdf.outputs.cache-hit == 'true' }}

      # Prepare the environment for the test
      - name: 🚧 Setup QEMU environment
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0
      - name: 🚧 Setup Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
      - name: 🚧 Load `.envrc` context
        run: direnv allow && direnv exec / direnv export gha >> "${GITHUB_ENV}"

      # Run the tests
      - name: 👷 Task docker:images:build (localhost/${{ inputs.application }}:ci)
        run: |
          task docker:images:build IMAGE=${{ inputs.application }} BUILD_TYPE=ci \
            --output group \
            --output-group-begin '::group::{{.TASK}} (${{ inputs.application }})' \
            --output-group-end '::endgroup::'
      - name: 🧪 Task docker:goss:run (localhost/${{ inputs.application }}:ci)
        run: |
          echo '::group::docker:goss:run (${{ inputs.application }})'
          task docker:ci IMAGE=${{ inputs.application }} GOSS_OPTS="--format junit" \
            > "apps/images/${{ inputs.application }}/dist/ci/goss-report.xml"
          echo '::endgroup::'
      - name: 📝 Upload Goss Test Report
        uses: mikepenz/action-junit-report@9379f0ccddcab154835d4e2487555ee79614fe95 # v4.2.1
        if: always()
        with:
          check_name: Goss Test Report (${{ inputs.application }})
          commit: ${{ github.event.workflow_run.head_sha }}
          include_passed: true
          report_paths: apps/images/${{ inputs.application }}/dist/ci/goss-report.xml
